from cpgzero import *
import random

#music.play("bgm_boss_2_02") #background music

in_play = False
outcome = "Do you want to Hit or Stand?"
player_score = 0
dealer_score = 0

SUITS = ['♣', '♦', '♥', '♠']
RANKS = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K']
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


####Button####
standButton = Actor("stand")
hitButton = Actor("hit")
dealButton = Actor("deal")
####Button####

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank
                
# define hand class
class Hand:
    def __init__(self):
        #pass	# create Hand object
        self.cards = []
    def __str__(self):
        #pass	# return a string representation of a hand
        showhands = ""
        for card in self.cards:
            showhands += " " + card.__str__()
        return "Card in hands" + showhands
    
    def add_card(self, card):
        #pass	# add a card object to a hand
        self.cards.append(card)
        
    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        #pass	# compute the value of the hand
        card_ace = False
        hands_value = 0
        
        for card in self.cards:
            rank = card.get_rank()
            hands_value += VALUES[rank]
            if(rank == 'A'):
                card_ace == 1
        if(hands_value < 11 and card_ace == True):
            hands_value += 10
        return hands_value
                            
# define deck class 
class Deck:
    def __init__(self):
        #pass	# create a Deck object
        self.cards = []

        for suit in SUITS:
            for rank in RANKS:
                self.cards.append(Card(suit, rank))
    def shuffle(self):
        # shuffle the deck 
        #pass    # use random.shuffle()
        random.shuffle(self.cards)
    def deal_card(self):
        #pass	# deal a card object from the deck
        return self.cards.pop(0)
    def __str__(self):
        #pass	# return a string representing the deck
        showdeck = ""
        for card in self.cards:
            showdeck += " " + card.__str__()

        return "Cards on deck" + showdeck
                        #define event handlers for buttons
def deal():
    global outcome, in_play, deck, deck, dealer_score, player_cards, dealer_cards
    # your code goes here  
    if(in_play == True):
        outcome = "Bad luck, do you want to play again?"
        dealer_score += 1
        in_play = False
    else:
        deck = Deck()
        outcome

        deck.shuffle()

        player_cards = Hand()
        dealer_cards = Hand()

        player_cards.add_card(deck.deal_card())
        player_cards.add_card(deck.deal_card())

        dealer_cards.add_card(deck.deal_card())
        dealer_cards.add_card(deck.deal_card())

        print ("Player: %s" , player_cards)
        print ("Dealer: %s" , dealer_cards)

        in_play = True
            
def hit():
    #pass	# replace with your code below
    
    # if the hand is in play, hit the player
   
    # if busted, assign a message to outcome, update in_play and score
    global outcome, in_play
    if in_play:
        if player_cards.get_value() <= 21:
            player_cards.add_card(deck.deal_card())

        print ("Player %s" % player_cards)
            
        if player_cards.get_value() > 21:
            outcome = "Bad Luck. Another deal??"
            in_play = False
            print ("Busted!!!")
                
def stand():
    pass	# replace with your code below
   
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score
    
    global outcome, player_score, dealer_score, in_play

    in_play = False

    while dealer_cards.get_value() < 17:
        dealer_cards.add_card(deck.deal_card())

    print ("Dealer: " % dealer_cards)

    if dealer_cards.get_value() > 21:
        outcome = "Dealer busted. Lucky you!!!"
        print ("Dealer busted. Player WIN!!!")
        player_score += 1
    else:
        if dealer_cards.get_value() >= player_cards.get_value() or player_cards.get_value() > 21:
            print ("Dealer WIN!!!")
            outcome = ("Dealer WIN!!! Another deal???")
            dealer_score += 1
        else:
            print ("Player WIN!!! New deal???")
            outcome = "Player WIN!!!"
            player_score += 1
                    

        
    
#Mouse click
def on_mouse_down(pos):
    global outcome
    pen.text(outcome, (-200, 100), "white", 24) 
    x, y = pos
    if (hitButton.collide_point(pos)):
        hit()
        #print("you are clicked hit")
    if (standButton.collide_point(pos)):
        stand()
        #print("you are clicked stand")
    if (dealButton.collide_point(pos)):
        deal()
        #print("you are clicked deal")
            
def update():  
    global outcome, in_play, player_score, dealer_score
    
    if in_play:                #if game is not end   
        
        pen.clear()   #clear the pen
        playercardstr = "Player: %s" % player_cards
        dealercardstr = "Dealer: %s" % dealer_cards
        pen.text(playercardstr, (-200, -200), "white", 24) 
        pen.text(dealercardstr, (-200, 275), "white", 24)
        dealerscorestr = "dealer_score: %s" % dealer_score
        playerscorestr = "player_score: %s" % player_score
        pen.text(playerscorestr, (-200, 400), "white", 24)
        pen.text(dealerscorestr, (-400, 400), "white", 24)
        pen.text(outcome, (-200, 100), "white", 24)
    else:                                              #if game is not end
        pen.clear()   #clear the pen
        pen.text(outcome, (-200, 100), "white", 24)
        playercardstr = "Player: %s" % player_cards
        dealercardstr = "Dealer: %s" % dealer_cards
        pen.text(playercardstr, (-200, -200), "white", 24) 
        pen.text(dealercardstr, (-200, 275), "white", 24)
        dealerscorestr = "dealer_score: %s" % dealer_score
        playerscorestr = "player_score: %s" % player_score
        pen.text(playerscorestr, (-200, 400), "white", 24)
        pen.text(dealerscorestr, (-400, 400), "white", 24)
        
            
deal()

