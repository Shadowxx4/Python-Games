# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36+72, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = "Do you want to Hit or Stand?"
player_score = 0
dealer_score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        #pass	# create Hand object
        self.cards = []
    def __str__(self):
        #pass	# return a string representation of a hand
        showhands = ""
        for card in self.cards:
            showhands += " " + card.__str__()
        return "Card in hands" + showhands
    
    def add_card(self, card):
        #pass	# add a card object to a hand
        self.cards.append(card)
        
    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        #pass	# compute the value of the hand, see Blackjack video
        card_ace = False
        hands_value = 0
        
        for card in self.cards:
            rank = card.get_rank()
            hands_value += VALUES[rank]
            if(rank == 'A'):
                card_ace == 1
        if(hands_value < 11 and card_ace == True):
            hands_value += 10
        return hands_value
    def draw(self, canvas, pos):
        #pass	# draw a hand on the canvas, use the draw method for cards
        for card in self.cards:
            card.draw(canvas, pos)
            pos[0] += 80
        
# define deck class 
class Deck:
    def __init__(self):
        #pass	# create a Deck object
        self.cards = []

        for suit in SUITS:
            for rank in RANKS:
                self.cards.append(Card(suit, rank))
    def shuffle(self):
        # shuffle the deck 
        #pass    # use random.shuffle()
        random.shuffle(self.cards)
    def deal_card(self):
        #pass	# deal a card object from the deck
        return self.cards.pop(0)
    def __str__(self):
        #pass	# return a string representing the deck
        showdeck = ""
        for card in self.cards:
            showdeck += " " + card.__str__()

        return "Cards on deck" + showdeck


#define event handlers for buttons
def deal():
    global outcome, in_play, deck, deck, dealer_score, player_cards, dealer_cards
    # your code goes here  
    if(in_play == True):
        outcome = "Bad luck, do you want to play again?"
        dealer_score += 1
        in_play = False
    else:
        deck = Deck()
        outcome

        deck.shuffle()

        player_cards = Hand()
        dealer_cards = Hand()

        player_cards.add_card(deck.deal_card())
        player_cards.add_card(deck.deal_card())

        dealer_cards.add_card(deck.deal_card())
        dealer_cards.add_card(deck.deal_card())

        print "Player: %s" % player_cards
        print "Dealer: %s" % dealer_cards

        in_play = True
    

def hit():
    #pass	# replace with your code below
    
    # if the hand is in play, hit the player
   
    # if busted, assign a message to outcome, update in_play and score
    global outcome, in_play
    if in_play:
        if player_cards.get_value() <= 21:
            player_cards.add_card(deck.deal_card())

        print "Player %s" % player_cards

        if player_cards.get_value() > 21:
            outcome = "Bad Luck. Another deal??"
            in_play = False
            print "Busted!!!"
    
    
def stand():
    pass	# replace with your code below
   
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score
    
    global outcome, player_score, dealer_score, in_play

    in_play = False

    while dealer_cards.get_value() < 17:
        dealer_cards.add_card(deck.deal_card())

    print "Dealer: %s" % dealer_cards

    if dealer_cards.get_value() > 21:
        outcome = "Dealer busted. Lucky you!!!"
        print "Dealer busted. Player WIN!!!"
        player_score += 1
    else:
        if dealer_cards.get_value() >= player_cards.get_value() or player_cards.get_value() > 21:
            print "Dealer WIN!!!"
            outcome = "Dealer WIN!!! Another deal???"
            dealer_score += 1
        else:
            print "Player WIN!!! New deal???"
            outcome = "Player WIN!!!"
            player_score += 1
# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    global outcome, in_play, card_back, card_loc, player_score, dealer_score

    canvas.draw_text("Blackjack", [220, 50], 50 ,"Black")

    player_cards.draw(canvas, [100, 300])
    dealer_cards.draw(canvas, [100, 150])

    canvas.draw_text(outcome, [10, 100], 30 ,"Red")

    canvas.draw_text("Dealer: %s" % dealer_score, [10, 150], 20 ,"Black")
    canvas.draw_text("Player: %s" % player_score, [10, 300], 20 ,"Black")

    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, (136,199), CARD_BACK_SIZE)

    #card = Card("S", "A")
    #card.draw(canvas, [300, 300])


# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Blue")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
